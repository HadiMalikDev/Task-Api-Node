type Task{
    taskId:ID!
    title:String!
    description:String!
    created_at:String!
    completed:Boolean!
    owner:String!
}
type Tasks{
    tasks:[Task]!
}
type OperationFailed{
    message:String!
}
union TasksResult=Tasks|OperationFailed
union TaskResult=Task|OperationFailed

extend type Query{
    tasks(token:String!):TasksResult!
    task(id:Int!,token:String!):TaskResult!
}

input newTask{
    title:String!
    description:String!
}
input updateFields{
    title:String
    description:String
    completed:Boolean
}
type mutationResult{
    success:Boolean!
}
union mutationResultUnion=mutationResult|OperationFailed

extend type Mutation{
    createTask(newTask:newTask,token:String!):mutationResultUnion!
    updateTask(id:Int!,updateFields:updateFields,token:String!):mutationResultUnion!
    deleteTask(id:Int!,token:String!):mutationResultUnion!
}